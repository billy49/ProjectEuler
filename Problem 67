# By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum
# # total from top to bottom is 23.
# #
# # 3
# # 7 4
# # 2 4 6
# # 8 5 9 3
# #
# # That is, 3 + 7 + 4 + 9 = 23.
# #
# # Find the maximum total from top to bottom in triangle.txt (right click and 'Save Link/Target As...'), a
# # 15K text file containing a triangle with one-hundred rows.
# #
# # NOTE: This is a much more difficult version of Problem 18. It is not possible to try every route to solve
# # this problem, as there are 299 altogether! If you could check one trillion (1012) routes every second it
# # would take over twenty billion years to check them all. There is an efficient algorithm to solve it. ;o)

import numpy as np

f = open("p067_triangle.txt","r")
contents = f.read()
lines = contents.split()
lines = [int(x) for x in lines]
x = np.array([])
for i in range(1, 101):
   result = np.array(lines[int((i*(i-1)/2)):int((i*(i+1)/2))])

   x = np.append(x, result)


def fill_lower_diag(a):
   n = int(np.sqrt(len(a) * 2)) + 1
   mask = np.tri(n, dtype=bool, k=-1)  # or np.arange(n)[:,None] > np.arange(n)
   out = np.zeros((n, n), dtype=int)
   out[mask] = a
   return out

t = fill_lower_diag(x)


for i in range(1,100):
   for j in range(100):
      t[100-i][j] = t[100-i][j] + max(t[100-i +1 ][j], t[100- i +1][j+1])


print(t[1,0])

# 7273

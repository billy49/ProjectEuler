# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?

import numpy as np

divisors = 0
i = 1
triangle = 0


def primes(n):
    """ Returns  a list of primes < n """
    sieve = [True] * n
    for i in range(3,int(n**0.5)+1,2):
        if sieve[i]:
            sieve[i*i::2*i]=[False]*((n-i*i-1)//(2*i)+1)
    return [2] + [i for i in range(3,n,2) if sieve[i]]

list = primes(100000)

def factors(n):
    #Returns the number of factors of n
    cutoff = 0
    j = 0
    factorized = np.zeros(int(n**0.5)+1)
    while n > 1:
        if n % list[j] == 0:
            n = n / list[j]
            factorized[j] = factorized[j] + 1
        else:
            j = j + 1
        cutoff = list[j]
    factorized = factorized + 1
    return np.prod(factorized)

while divisors < 500:
    triangle = triangle + i
    divisors = factors(triangle)
    i = i + 1

print(triangle)

#76576500
